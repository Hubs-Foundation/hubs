###
# this dockerfile produces image/container that serves customly packaged hubs and admin static files
# the result container should serve reticulum as "hubs_page_origin" and "admin_page_origin" on (path) "/hubs/pages"
###
from node:22 as builder
env QT_QPA_PLATFORM offscreen
# Enable webpack detailed stats
env WEBPACK_STATS=verbose
# Detect architecture and install PhantomJS manually from Ubuntu archive
run apt update && apt -y install wget && \
    ARCH=$(dpkg --print-architecture) && \
    if [ "$ARCH" = "arm64" ]; then \
        wget https://launchpad.net/ubuntu/+archive/primary/+files/phantomjs_2.1.1+dfsg-2ubuntu1_arm64.deb; \
    elif [ "$ARCH" = "amd64" ]; then \
        wget https://launchpad.net/ubuntu/+archive/primary/+files/phantomjs_2.1.1+dfsg-2ubuntu1_amd64.deb; \
    fi && \
    apt install -y ./phantomjs_2.1.1+dfsg-2ubuntu1_*.deb || true && \
    apt install -y -f
run mkdir -p /hubs/admin/ && cd /hubs
copy package.json ./
copy package-lock.json ./
run npm ci
copy admin/package.json admin/
copy admin/package-lock.json admin/
run cd admin && npm ci --legacy-peer-deps && cd ..
copy . .
env BASE_ASSETS_PATH="{{rawhubs-base-assets-path}}"
# Print diagnostic information
run echo "Node version: $(node --version)" && \
    echo "NPM version: $(npm --version)" && \
    echo "Memory info:" && cat /proc/meminfo | grep -E "MemTotal|MemFree|MemAvailable" && \
    echo "Disk space:" && df -h /
# Build with verbose output and capture errors
# Note: The Babel deoptimization warning about pdf.js exceeding 500KB is expected and not the actual error
run echo "Starting main build..." && \
    npm run build -- --stats=detailed 2>&1 | tee /build-main.log || \
    (echo "==== BUILD FAILED ====" && \
     echo "Last 100 lines of build output:" && \
     tail -100 /build-main.log && \
     echo "==== Package versions ====" && \
     npm list --depth=0 && \
     echo "==== Webpack config check ====" && \
     npx webpack configtest && \
     exit 1)
# Build admin with verbose output  
run echo "Starting admin build..." && \
    cd admin && \
    npm run build 2>&1 | tee /build-admin.log || \
    (echo "==== ADMIN BUILD FAILED ====" && \
     echo "Last 100 lines of admin build output:" && \
     tail -100 /build-admin.log && \
     echo "==== Admin package versions ====" && \
     npm list --depth=0 && \
     exit 1) && \
    cp -R dist/* ../dist && cd ..
run mkdir -p dist/pages && mv dist/*.html dist/pages && mv dist/hub.service.js dist/pages && mv dist/schema.toml dist/pages          
run mkdir /hubs/rawhubs && mv dist/pages /hubs/rawhubs && mv dist/assets /hubs/rawhubs && mv dist/favicon.ico /hubs/rawhubs/pages

from alpine/openssl as ssl
run mkdir /ssl && openssl req -x509 -newkey rsa:2048 -sha256 -days 36500 -nodes -keyout /ssl/key -out /ssl/cert -subj '/CN=hubs'

from nginx:alpine
run apk add bash
run mkdir /ssl && mkdir -p /www/hubs && mkdir -p /www/hubs/pages && mkdir -p /www/hubs/assets
copy --from=ssl /ssl /ssl
copy --from=builder /hubs/rawhubs/pages /www/hubs/pages
copy --from=builder /hubs/rawhubs/assets /www/hubs/assets
copy scripts/docker/nginx.config /etc/nginx/conf.d/default.conf
copy scripts/docker/run.sh /run.sh
run chmod +x /run.sh && cat /run.sh
cmd bash /run.sh
