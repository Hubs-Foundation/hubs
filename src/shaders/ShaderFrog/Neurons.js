import noise from "../../assets/textures/noise.jpg";

var Neurons = {
  "id": 4379,
  "name": "Neurons",
  "fragment": "#define PI 3.141592653589793238462643383279\n#define tau 6.2831853\n#define F4 0.309016994374947451\n\nprecision highp float;\nprecision highp int;\nuniform float time;\nuniform float starRadius;\nuniform vec3 starColor;\nuniform float starDensity;\nuniform float Parallax_Starfield1589818251521_34_speed;\nuniform vec2 Parallax_Starfield1589818251521_34_resolution;\nuniform vec3 Caustic_Improved1589818274674_65_color;\nuniform vec2 Caustic_Improved1589818274674_65_uvScale;\nuniform float Caustic_Improved1589818274674_65_brightness;\nuniform float Caustic_Improved1589818274674_65_speed;\nuniform float contrast;\nuniform float distortion;\nuniform float Noise_Ripples1589818316527_119_speed;\nuniform vec3 Noise_Ripples1589818316527_119_color;\nuniform float Noise_Ripples1589818316527_119_brightness;\nuniform sampler2D noiseImage;\nuniform vec2 Noise_Ripples1589818316527_119_resolution;\nuniform vec2 Tiling_4D_Perlin_Noise1589818366493_165_uvScale;\nuniform vec3 Tiling_4D_Perlin_Noise1589818366493_165_color;\nuniform float Tiling_4D_Perlin_Noise1589818366493_165_speed;\nuniform float Caustic_Image_Based1589818518398_257_speed;\nuniform float Caustic_Image_Based1589818518398_257_resolution;\nuniform vec3 Caustic_Image_Based1589818518398_257_color;\nuniform sampler2D image;\nuniform float Caustic_Image_Based1589818518398_257_brightness;\nvarying vec2 Parallax_Starfield1589818251521_34_vUv;\nfloat starrand(float seedx, float seedy, int seedp) \n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            return 0.05 + 0.9 * fract(sin(float(seedp) * 437.234) * 374.2542 - cos(seedx * 432.252) * 23.643 + sin(seedy * 73.2454) * 372.23455);\n                                                                                                                                                                                                                                                        }\nvarying vec3 Caustic_Improved1589818274674_65_vNormal;\nvarying vec2 Caustic_Improved1589818274674_65_vUv;\nvec3 Caustic_Improved1589818274674_65_mod289(vec3 x) \n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            return x - floor(x * (1.0 / 289.0)) * 289.0;\n                                                                                                                                                                                                                                                        }\nvec4 Caustic_Improved1589818274674_65_mod289(vec4 x) \n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            return x - floor(x * (1.0 / 289.0)) * 289.0;\n                                                                                                                                                                                                                                                        }\nvec4 Caustic_Improved1589818274674_65_permute(vec4 x) \n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            return Caustic_Improved1589818274674_65_mod289(((x * 34.0) + 1.0) * x);\n                                                                                                                                                                                                                                                        }\nvec4 Caustic_Improved1589818274674_65_taylorInvSqrt(vec4 r) \n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            return 1.79284291400159 - 0.85373472095314 * r;\n                                                                                                                                                                                                                                                        }\nvec3 fade(vec3 t) \n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);\n                                                                                                                                                                                                                                                        }\nfloat cnoise(vec3 P) \n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            vec3 Pi0 = floor(P);\n                                                                                                                                                                                                                                                            vec3 Pi1 = Pi0 + vec3(1.0);\n                                                                                                                                                                                                                                                            Pi0 = Caustic_Improved1589818274674_65_mod289(Pi0);\n                                                                                                                                                                                                                                                            Pi1 = Caustic_Improved1589818274674_65_mod289(Pi1);\n                                                                                                                                                                                                                                                            vec3 Pf0 = fract(P);\n                                                                                                                                                                                                                                                            vec3 Pf1 = Pf0 - vec3(1.0);\n                                                                                                                                                                                                                                                            vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n                                                                                                                                                                                                                                                            vec4 iy = vec4(Pi0.yy, Pi1.yy);\n                                                                                                                                                                                                                                                            vec4 iz0 = Pi0.zzzz;\n                                                                                                                                                                                                                                                            vec4 iz1 = Pi1.zzzz;\n                                                                                                                                                                                                                                                            vec4 ixy = Caustic_Improved1589818274674_65_permute(Caustic_Improved1589818274674_65_permute(ix) + iy);\n                                                                                                                                                                                                                                                            vec4 ixy0 = Caustic_Improved1589818274674_65_permute(ixy + iz0);\n                                                                                                                                                                                                                                                            vec4 ixy1 = Caustic_Improved1589818274674_65_permute(ixy + iz1);\n                                                                                                                                                                                                                                                            vec4 gx0 = ixy0 * (1.0 / 7.0);\n                                                                                                                                                                                                                                                            vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n                                                                                                                                                                                                                                                            gx0 = fract(gx0);\n                                                                                                                                                                                                                                                            vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n                                                                                                                                                                                                                                                            vec4 sz0 = step(gz0, vec4(0.0));\n                                                                                                                                                                                                                                                            gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n                                                                                                                                                                                                                                                            gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n                                                                                                                                                                                                                                                            vec4 gx1 = ixy1 * (1.0 / 7.0);\n                                                                                                                                                                                                                                                            vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n                                                                                                                                                                                                                                                            gx1 = fract(gx1);\n                                                                                                                                                                                                                                                            vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n                                                                                                                                                                                                                                                            vec4 sz1 = step(gz1, vec4(0.0));\n                                                                                                                                                                                                                                                            gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n                                                                                                                                                                                                                                                            gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n                                                                                                                                                                                                                                                            vec3 g000 = vec3(gx0.x, gy0.x, gz0.x);\n                                                                                                                                                                                                                                                            vec3 g100 = vec3(gx0.y, gy0.y, gz0.y);\n                                                                                                                                                                                                                                                            vec3 g010 = vec3(gx0.z, gy0.z, gz0.z);\n                                                                                                                                                                                                                                                            vec3 g110 = vec3(gx0.w, gy0.w, gz0.w);\n                                                                                                                                                                                                                                                            vec3 g001 = vec3(gx1.x, gy1.x, gz1.x);\n                                                                                                                                                                                                                                                            vec3 g101 = vec3(gx1.y, gy1.y, gz1.y);\n                                                                                                                                                                                                                                                            vec3 g011 = vec3(gx1.z, gy1.z, gz1.z);\n                                                                                                                                                                                                                                                            vec3 g111 = vec3(gx1.w, gy1.w, gz1.w);\n                                                                                                                                                                                                                                                            vec4 norm0 = Caustic_Improved1589818274674_65_taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n                                                                                                                                                                                                                                                            g000 *= norm0.x;\n                                                                                                                                                                                                                                                            g010 *= norm0.y;\n                                                                                                                                                                                                                                                            g100 *= norm0.z;\n                                                                                                                                                                                                                                                            g110 *= norm0.w;\n                                                                                                                                                                                                                                                            vec4 norm1 = Caustic_Improved1589818274674_65_taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g011, g011)));\n                                                                                                                                                                                                                                                            g001 *= norm1.x;\n                                                                                                                                                                                                                                                            g011 *= norm1.y;\n                                                                                                                                                                                                                                                            g101 *= norm1.z;\n                                                                                                                                                                                                                                                            g111 *= norm1.w;\n                                                                                                                                                                                                                                                            float n000 = dot(g000, Pf0);\n                                                                                                                                                                                                                                                            float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n                                                                                                                                                                                                                                                            float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n                                                                                                                                                                                                                                                            float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n                                                                                                                                                                                                                                                            float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n                                                                                                                                                                                                                                                            float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n                                                                                                                                                                                                                                                            float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n                                                                                                                                                                                                                                                            float n111 = dot(g111, Pf1);\n                                                                                                                                                                                                                                                            vec3 fade_xyz = fade(Pf0);\n                                                                                                                                                                                                                                                            vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n                                                                                                                                                                                                                                                            vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n                                                                                                                                                                                                                                                            float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n                                                                                                                                                                                                                                                            return 2.2 * n_xyz;\n                                                                                                                                                                                                                                                        }\nfloat surface3(vec3 coord) \n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            float frequency = 7.0;\n                                                                                                                                                                                                                                                            float n = 0.4;\n                                                                                                                                                                                                                                                            n -= 1.0 * abs(cnoise(coord * frequency));\n                                                                                                                                                                                                                                                            n -= 1.5 * abs(cnoise(coord * frequency * 4.0));\n                                                                                                                                                                                                                                                            n -= 1.25 * abs(cnoise(coord * frequency * 4.0));\n                                                                                                                                                                                                                                                            return clamp(n, -0.6, 1.0);\n                                                                                                                                                                                                                                                        }\nvarying vec2 Noise_Ripples1589818316527_119_vUv;\nmat2 makem2(in float theta) \n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            float c = cos(theta);\n                                                                                                                                                                                                                                                            float s = sin(theta);\n                                                                                                                                                                                                                                                            return mat2(c, -s, s, c);\n                                                                                                                                                                                                                                                        }\nfloat noise(in vec2 x) \n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            return texture2D(noiseImage, x * .01).x;\n                                                                                                                                                                                                                                                        }\nfloat fbm(in vec2 p) \n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            float z = 2.;\n                                                                                                                                                                                                                                                            float rz = 0.;\n                                                                                                                                                                                                                                                            vec2 bp = p;\n                                                                                                                                                                                                                                                            for (float i = 1.;\n i < 6.0; i++) \n                                                                                                                                                                                                                                                            {\n                                                                                                                                                                                                                                                                rz += abs((noise(p) - 0.5) * 2.0) / z;\n                                                                                                                                                                                                                                                                z = z * 2.;\n                                                                                                                                                                                                                                                                p = p * 2.;\n                                                                                                                                                                                                                                                            }\n                                                                                                                                                                                                                                                            return rz;\n                                                                                                                                                                                                                                                        }\nfloat dualfbm(in vec2 p) \n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            vec2 p2 = p * distortion;\n                                                                                                                                                                                                                                                            vec2 basis = vec2(fbm(p2 - time * Noise_Ripples1589818316527_119_speed * 1.6), fbm(p2 + time * Noise_Ripples1589818316527_119_speed * 1.7));\n                                                                                                                                                                                                                                                            basis = (basis - .5) * .2;\n                                                                                                                                                                                                                                                            p += basis;\n                                                                                                                                                                                                                                                            return fbm(p * makem2(time * Noise_Ripples1589818316527_119_speed * 0.2));\n                                                                                                                                                                                                                                                        }\nvarying vec2 Tiling_4D_Perlin_Noise1589818366493_165_vUv;\nvec4 Tiling_4D_Perlin_Noise1589818366493_165_mod289(vec4 x) \n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            return x - floor(x * (1.0 / 289.0)) * 289.0;\n                                                                                                                                                                                                                                                        }\nfloat Tiling_4D_Perlin_Noise1589818366493_165_mod289(float x) \n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            return x - floor(x * (1.0 / 289.0)) * 289.0;\n                                                                                                                                                                                                                                                        }\nvec4 Tiling_4D_Perlin_Noise1589818366493_165_permute(vec4 x) \n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            return Tiling_4D_Perlin_Noise1589818366493_165_mod289(((x * 34.0) + 1.0) * x);\n                                                                                                                                                                                                                                                        }\nfloat Tiling_4D_Perlin_Noise1589818366493_165_permute(float x) \n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            return Tiling_4D_Perlin_Noise1589818366493_165_mod289(((x * 34.0) + 1.0) * x);\n                                                                                                                                                                                                                                                        }\nvec4 Tiling_4D_Perlin_Noise1589818366493_165_taylorInvSqrt(vec4 r) \n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            return 1.79284291400159 - 0.85373472095314 * r;\n                                                                                                                                                                                                                                                        }\nfloat Tiling_4D_Perlin_Noise1589818366493_165_taylorInvSqrt(float r) \n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            return 1.79284291400159 - 0.85373472095314 * r;\n                                                                                                                                                                                                                                                        }\nvec4 grad4(float j, vec4 ip) \n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n                                                                                                                                                                                                                                                            vec4 p, s;\n                                                                                                                                                                                                                                                            p.xyz = floor(fract(vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n                                                                                                                                                                                                                                                            p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n                                                                                                                                                                                                                                                            s = vec4(lessThan(p, vec4(0.0)));\n                                                                                                                                                                                                                                                            p.xyz = p.xyz + (s.xyz * 2.0 - 1.0) * s.www;\n                                                                                                                                                                                                                                                            return p;\n                                                                                                                                                                                                                                                        }\nfloat snoise(vec4 v) \n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            const vec4 C = vec4(0.138196601125011, 0.276393202250021, 0.414589803375032, -0.447213595499958);\n                                                                                                                                                                                                                                                            vec4 i = floor(v + dot(v, vec4(F4)));\n                                                                                                                                                                                                                                                            vec4 x0 = v - i + dot(i, C.xxxx);\n                                                                                                                                                                                                                                                            vec4 i0;\n                                                                                                                                                                                                                                                            vec3 isX = step(x0.yzw, x0.xxx);\n                                                                                                                                                                                                                                                            vec3 isYZ = step(x0.zww, x0.yyz);\n                                                                                                                                                                                                                                                            i0.x = isX.x + isX.y + isX.z;\n                                                                                                                                                                                                                                                            i0.yzw = 1.0 - isX;\n                                                                                                                                                                                                                                                            i0.y += isYZ.x + isYZ.y;\n                                                                                                                                                                                                                                                            i0.zw += 1.0 - isYZ.xy;\n                                                                                                                                                                                                                                                            i0.z += isYZ.z;\n                                                                                                                                                                                                                                                            i0.w += 1.0 - isYZ.z;\n                                                                                                                                                                                                                                                            vec4 i3 = clamp(i0, 0.0, 1.0);\n                                                                                                                                                                                                                                                            vec4 i2 = clamp(i0 - 1.0, 0.0, 1.0);\n                                                                                                                                                                                                                                                            vec4 i1 = clamp(i0 - 2.0, 0.0, 1.0);\n                                                                                                                                                                                                                                                            vec4 x1 = x0 - i1 + C.xxxx;\n                                                                                                                                                                                                                                                            vec4 x2 = x0 - i2 + C.yyyy;\n                                                                                                                                                                                                                                                            vec4 x3 = x0 - i3 + C.zzzz;\n                                                                                                                                                                                                                                                            vec4 x4 = x0 + C.wwww;\n                                                                                                                                                                                                                                                            i = Tiling_4D_Perlin_Noise1589818366493_165_mod289(i);\n                                                                                                                                                                                                                                                            float j0 = Tiling_4D_Perlin_Noise1589818366493_165_permute(Tiling_4D_Perlin_Noise1589818366493_165_permute(Tiling_4D_Perlin_Noise1589818366493_165_permute(Tiling_4D_Perlin_Noise1589818366493_165_permute(i.w) + i.z) + i.y) + i.x);\n                                                                                                                                                                                                                                                            vec4 j1 = Tiling_4D_Perlin_Noise1589818366493_165_permute(Tiling_4D_Perlin_Noise1589818366493_165_permute(Tiling_4D_Perlin_Noise1589818366493_165_permute(Tiling_4D_Perlin_Noise1589818366493_165_permute(i.w + vec4(i1.w, i2.w, i3.w, 1.0)) + i.z + vec4(i1.z, i2.z, i3.z, 1.0)) + i.y + vec4(i1.y, i2.y, i3.y, 1.0)) + i.x + vec4(i1.x, i2.x, i3.x, 1.0));\n                                                                                                                                                                                                                                                            vec4 ip = vec4(1.0 / 294.0, 1.0 / 49.0, 1.0 / 7.0, 0.0);\n                                                                                                                                                                                                                                                            vec4 p0 = grad4(j0, ip);\n                                                                                                                                                                                                                                                            vec4 p1 = grad4(j1.x, ip);\n                                                                                                                                                                                                                                                            vec4 p2 = grad4(j1.y, ip);\n                                                                                                                                                                                                                                                            vec4 p3 = grad4(j1.z, ip);\n                                                                                                                                                                                                                                                            vec4 p4 = grad4(j1.w, ip);\n                                                                                                                                                                                                                                                            vec4 norm = Tiling_4D_Perlin_Noise1589818366493_165_taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n                                                                                                                                                                                                                                                            p0 *= norm.x;\n                                                                                                                                                                                                                                                            p1 *= norm.y;\n                                                                                                                                                                                                                                                            p2 *= norm.z;\n                                                                                                                                                                                                                                                            p3 *= norm.w;\n                                                                                                                                                                                                                                                            p4 *= Tiling_4D_Perlin_Noise1589818366493_165_taylorInvSqrt(dot(p4, p4));\n                                                                                                                                                                                                                                                            vec3 m0 = max(0.6 - vec3(dot(x0, x0), dot(x1, x1), dot(x2, x2)), 0.0);\n                                                                                                                                                                                                                                                            vec2 m1 = max(0.6 - vec2(dot(x3, x3), dot(x4, x4)), 0.0);\n                                                                                                                                                                                                                                                            m0 = m0 * m0;\n                                                                                                                                                                                                                                                            m1 = m1 * m1;\n                                                                                                                                                                                                                                                            return 49.0 * (dot(m0 * m0, vec3(dot(p0, x0), dot(p1, x1), dot(p2, x2))) + dot(m1 * m1, vec2(dot(p3, x3), dot(p4, x4))));\n                                                                                                                                                                                                                                                        }\nfloat surface(vec4 coord) \n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            float n = 0.0;\n                                                                                                                                                                                                                                                            n += 0.25 * abs(snoise(coord * 4.0));\n                                                                                                                                                                                                                                                            n += 0.5 * abs(snoise(coord * 8.0));\n                                                                                                                                                                                                                                                            n += 0.25 * abs(snoise(coord * 16.0));\n                                                                                                                                                                                                                                                            n += 0.125 * abs(snoise(coord * 32.0));\n                                                                                                                                                                                                                                                            return n;\n                                                                                                                                                                                                                                                        }\nvarying vec2 Caustic_Image_Based1589818518398_257_vUv;\nvarying vec3 Caustic_Image_Based1589818518398_257_vPosition;\nvarying vec3 Caustic_Image_Based1589818518398_257_vNormal;\nvec3 lig = normalize(vec3(0.9, 0.35, -0.2));\nvec4 Parallax_Starfield1589818251521_34_main(void) \n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            vec4 Parallax_Starfield1589818251521_34_gl_FragColor = vec4(0.0);\n                                                                                                                                                                                                                                                            vec2 position = Parallax_Starfield1589818251521_34_vUv.xy * Parallax_Starfield1589818251521_34_resolution.xy;\n                                                                                                                                                                                                                                                            Parallax_Starfield1589818251521_34_gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n                                                                                                                                                                                                                                                            for (int p = 0;\n p < 20; p++) \n                                                                                                                                                                                                                                                            {\n                                                                                                                                                                                                                                                                float scale = (1.0 / starRadius) + float(p);\n                                                                                                                                                                                                                                                                vec2 vpos = position * scale;\n                                                                                                                                                                                                                                                                vpos.x += (time * Parallax_Starfield1589818251521_34_speed) / scale;\n                                                                                                                                                                                                                                                                vpos.y += Parallax_Starfield1589818251521_34_speed * time / scale;\n                                                                                                                                                                                                                                                                vec2 spos = vec2(starrand(floor(vpos.x), floor(vpos.y), p), starrand(10.5 + floor(vpos.x), 10.5 + floor(vpos.y), p));\n                                                                                                                                                                                                                                                                float px = scale / 80.0 / 3.0;\n                                                                                                                                                                                                                                                                float size = 1.0 / (scale * (500.0 / starDensity));\n                                                                                                                                                                                                                                                                float brite = 1.0;\n                                                                                                                                                                                                                                                                if (size < px) \n                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                    brite = size / px;\n                                                                                                                                                                                                                                                                    size = px;\n                                                                                                                                                                                                                                                                }\n                                                                                                                                                                                                                                                                 Parallax_Starfield1589818251521_34_gl_FragColor.rgb += starColor * min(1.0, max(0.0, starDensity - length(spos - fract(vpos)) / size)) * brite;\n                                                                                                                                                                                                                                                            }\n                                                                                                                                                                                                                                                            return Parallax_Starfield1589818251521_34_gl_FragColor *= 1.0;\n                                                                                                                                                                                                                                                        }\nvec4 Caustic_Improved1589818274674_65_main(void) \n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            vec4 Caustic_Improved1589818274674_65_gl_FragColor = vec4(0.0);\n                                                                                                                                                                                                                                                            vec2 uvMax = (2.0 * asin(sin(2.0 * PI * Caustic_Improved1589818274674_65_vUv))) / PI;\n                                                                                                                                                                                                                                                            float n = surface3(vec3(uvMax * Caustic_Improved1589818274674_65_uvScale, time * Caustic_Improved1589818274674_65_speed));\n                                                                                                                                                                                                                                                            vec3 s = vec3(clamp(n, 0.0, 1.0)) * Caustic_Improved1589818274674_65_color * Caustic_Improved1589818274674_65_brightness;\n                                                                                                                                                                                                                                                            Caustic_Improved1589818274674_65_gl_FragColor = vec4(s, 1.0);\n                                                                                                                                                                                                                                                            return Caustic_Improved1589818274674_65_gl_FragColor *= 1.0;\n                                                                                                                                                                                                                                                        }\nvec4 Noise_Ripples1589818316527_119_main() \n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            vec4 Noise_Ripples1589818316527_119_gl_FragColor = vec4(0.0);\n                                                                                                                                                                                                                                                            vec2 p = (Noise_Ripples1589818316527_119_vUv.xy - 0.5) * Noise_Ripples1589818316527_119_resolution;\n                                                                                                                                                                                                                                                            float rz = dualfbm(p);\n                                                                                                                                                                                                                                                            vec3 col = (Noise_Ripples1589818316527_119_color / rz) * Noise_Ripples1589818316527_119_brightness;\n                                                                                                                                                                                                                                                            col = ((col - 0.5) * max(contrast, 0.0)) + 0.5;\n                                                                                                                                                                                                                                                            Noise_Ripples1589818316527_119_gl_FragColor = vec4(col, 1.0);\n                                                                                                                                                                                                                                                            return Noise_Ripples1589818316527_119_gl_FragColor *= 1.0;\n                                                                                                                                                                                                                                                        }\nvec4 Tiling_4D_Perlin_Noise1589818366493_165_main() \n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            vec4 Tiling_4D_Perlin_Noise1589818366493_165_gl_FragColor = vec4(0.0);\n                                                                                                                                                                                                                                                            float s = Tiling_4D_Perlin_Noise1589818366493_165_vUv.x * Tiling_4D_Perlin_Noise1589818366493_165_uvScale.x;\n                                                                                                                                                                                                                                                            float t = Tiling_4D_Perlin_Noise1589818366493_165_vUv.y * Tiling_4D_Perlin_Noise1589818366493_165_uvScale.y;\n                                                                                                                                                                                                                                                            float multiplier = 1.0 / (2.0 * PI);\n                                                                                                                                                                                                                                                            float nx = cos(s * 2.0 * PI) * multiplier;\n                                                                                                                                                                                                                                                            float ny = cos(t * 2.0 * PI) * multiplier;\n                                                                                                                                                                                                                                                            float nz = sin(s * 2.0 * PI) * multiplier;\n                                                                                                                                                                                                                                                            float nw = sin(t * 2.0 * PI) * multiplier;\n                                                                                                                                                                                                                                                            float surf = surface(vec4(nx, ny, nz, nw) + time * Tiling_4D_Perlin_Noise1589818366493_165_speed);\n                                                                                                                                                                                                                                                            Tiling_4D_Perlin_Noise1589818366493_165_gl_FragColor = vec4(Tiling_4D_Perlin_Noise1589818366493_165_color * vec3(surf), 1.0);\n                                                                                                                                                                                                                                                            return Tiling_4D_Perlin_Noise1589818366493_165_gl_FragColor *= 1.0;\n                                                                                                                                                                                                                                                        }\nvec4 Caustic_Image_Based1589818518398_257_main() \n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            vec4 Caustic_Image_Based1589818518398_257_gl_FragColor = vec4(0.0);\n                                                                                                                                                                                                                                                            vec2 uvMax = (2.0 * asin(sin(2.0 * PI * Caustic_Image_Based1589818518398_257_vUv))) / PI;\n                                                                                                                                                                                                                                                            vec2 position = Caustic_Image_Based1589818518398_257_vUv * Caustic_Image_Based1589818518398_257_resolution;\n                                                                                                                                                                                                                                                            vec3 nor = vec3(0.0, 1.0, 0.0);\n                                                                                                                                                                                                                                                            float dif = max(dot(nor, lig), 0.0);\n                                                                                                                                                                                                                                                            vec3 pos = vec3(position.x, 0.0, position.y);\n                                                                                                                                                                                                                                                            float timeScale = time * Caustic_Image_Based1589818518398_257_speed;\n                                                                                                                                                                                                                                                            vec3 brdf = vec3(0.0);\n                                                                                                                                                                                                                                                            float cc = 0.55 * texture2D(image, 1.8 * 0.02 * pos.xz + 0.007 * timeScale * vec2(1.0, 0.0)).x;\n                                                                                                                                                                                                                                                            cc += 0.25 * texture2D(image, 1.8 * 0.04 * pos.xz + 0.011 * timeScale * vec2(0.0, 1.0)).x;\n                                                                                                                                                                                                                                                            cc += 0.10 * texture2D(image, 1.8 * 0.08 * pos.xz + 0.014 * timeScale * vec2(-1.0, -1.0)).x;\n                                                                                                                                                                                                                                                            cc = 0.6 * (1.0 - smoothstep(0.0, 0.025, abs(cc - 0.4))) + 0.4 * (1.0 - smoothstep(0.0, 0.150, abs(cc - 2.4)));\n                                                                                                                                                                                                                                                            vec3 col = Caustic_Image_Based1589818518398_257_color * cc;\n                                                                                                                                                                                                                                                            Caustic_Image_Based1589818518398_257_gl_FragColor = vec4(Caustic_Image_Based1589818518398_257_color * cc * Caustic_Image_Based1589818518398_257_brightness, 1.0);\n                                                                                                                                                                                                                                                            return Caustic_Image_Based1589818518398_257_gl_FragColor *= 1.0;\n                                                                                                                                                                                                                                                        }\nvoid main() \n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            gl_FragColor = ((Caustic_Improved1589818274674_65_main() * Tiling_4D_Perlin_Noise1589818366493_165_main()) + Parallax_Starfield1589818251521_34_main() + Caustic_Image_Based1589818518398_257_main() + Noise_Ripples1589818316527_119_main());                                                                                                                                                                                                                                                        }\n",
  "vertex": "precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform float time;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying vec3 Parallax_Starfield1589818251521_34_vPosition;\nvarying vec3 Parallax_Starfield1589818251521_34_vNormal;\nvarying vec2 Parallax_Starfield1589818251521_34_vUv;\nvarying vec2 Parallax_Starfield1589818251521_34_vUv2;\nvarying vec2 Caustic_Improved1589818274674_65_vUv;\nvarying vec3 Caustic_Improved1589818274674_65_vNormal;\nvarying vec3 Noise_Ripples1589818316527_119_vPosition;\nvarying vec3 Noise_Ripples1589818316527_119_vNormal;\nvarying vec2 Noise_Ripples1589818316527_119_vUv;\nvarying vec2 Noise_Ripples1589818316527_119_vUv2;\nvarying vec3 Tiling_4D_Perlin_Noise1589818366493_165_vPosition;\nvarying vec3 Tiling_4D_Perlin_Noise1589818366493_165_vNormal;\nvarying vec2 Tiling_4D_Perlin_Noise1589818366493_165_vUv;\nvarying vec2 Tiling_4D_Perlin_Noise1589818366493_165_vUv2;\nvarying vec2 Caustic_Image_Based1589818518398_257_vUv;\nvarying vec3 Caustic_Image_Based1589818518398_257_vPosition;\nvarying vec3 Caustic_Image_Based1589818518398_257_vNormal;\nvec4 Parallax_Starfield1589818251521_34_main() \n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            vec4 Parallax_Starfield1589818251521_34_gl_Position = vec4(0.0);\n                                                                                                                                                                                                                                                            Parallax_Starfield1589818251521_34_vNormal = normal;\n                                                                                                                                                                                                                                                            Parallax_Starfield1589818251521_34_vUv = uv;\n                                                                                                                                                                                                                                                            Parallax_Starfield1589818251521_34_vUv2 = uv2;\n                                                                                                                                                                                                                                                            Parallax_Starfield1589818251521_34_vPosition = position;\n                                                                                                                                                                                                                                                            Parallax_Starfield1589818251521_34_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                                                                                                                                                                                                                                                            return Parallax_Starfield1589818251521_34_gl_Position *= 1.0;\n                                                                                                                                                                                                                                                        }\nvec4 Caustic_Improved1589818274674_65_main() \n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            vec4 Caustic_Improved1589818274674_65_gl_Position = vec4(0.0);\n                                                                                                                                                                                                                                                            Caustic_Improved1589818274674_65_vNormal = position * normal;\n                                                                                                                                                                                                                                                            Caustic_Improved1589818274674_65_vUv = uv;\n                                                                                                                                                                                                                                                            Caustic_Improved1589818274674_65_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                                                                                                                                                                                                                                                            return Caustic_Improved1589818274674_65_gl_Position *= 1.0;\n                                                                                                                                                                                                                                                        }\nvec4 Noise_Ripples1589818316527_119_main() \n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            vec4 Noise_Ripples1589818316527_119_gl_Position = vec4(0.0);\n                                                                                                                                                                                                                                                            Noise_Ripples1589818316527_119_vNormal = normal;\n                                                                                                                                                                                                                                                            Noise_Ripples1589818316527_119_vUv = uv;\n                                                                                                                                                                                                                                                            Noise_Ripples1589818316527_119_vUv2 = uv2;\n                                                                                                                                                                                                                                                            Noise_Ripples1589818316527_119_vPosition = position;\n                                                                                                                                                                                                                                                            Noise_Ripples1589818316527_119_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                                                                                                                                                                                                                                                            return Noise_Ripples1589818316527_119_gl_Position *= 1.0;\n                                                                                                                                                                                                                                                        }\nvec4 Tiling_4D_Perlin_Noise1589818366493_165_main() \n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            vec4 Tiling_4D_Perlin_Noise1589818366493_165_gl_Position = vec4(0.0);\n                                                                                                                                                                                                                                                            Tiling_4D_Perlin_Noise1589818366493_165_vNormal = normal;\n                                                                                                                                                                                                                                                            Tiling_4D_Perlin_Noise1589818366493_165_vUv = uv;\n                                                                                                                                                                                                                                                            Tiling_4D_Perlin_Noise1589818366493_165_vUv2 = uv2;\n                                                                                                                                                                                                                                                            Tiling_4D_Perlin_Noise1589818366493_165_vPosition = position;\n                                                                                                                                                                                                                                                            Tiling_4D_Perlin_Noise1589818366493_165_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                                                                                                                                                                                                                                                            return Tiling_4D_Perlin_Noise1589818366493_165_gl_Position *= 1.0;\n                                                                                                                                                                                                                                                        }\nvec4 Caustic_Image_Based1589818518398_257_main() \n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            vec4 Caustic_Image_Based1589818518398_257_gl_Position = vec4(0.0);\n                                                                                                                                                                                                                                                            Caustic_Image_Based1589818518398_257_vUv = uv;\n                                                                                                                                                                                                                                                            Caustic_Image_Based1589818518398_257_vPosition = position;\n                                                                                                                                                                                                                                                            Caustic_Image_Based1589818518398_257_vNormal = normal;\n                                                                                                                                                                                                                                                            Caustic_Image_Based1589818518398_257_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                                                                                                                                                                                                                                                            return Caustic_Image_Based1589818518398_257_gl_Position *= 1.0;\n                                                                                                                                                                                                                                                        }\nvoid main() \n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            gl_Position = Parallax_Starfield1589818251521_34_main() + Caustic_Improved1589818274674_65_main() + Noise_Ripples1589818316527_119_main() + Tiling_4D_Perlin_Noise1589818366493_165_main() + Caustic_Image_Based1589818518398_257_main();                                                                                                                                                                                                                                                        }\n",
  "uniforms": {
    "cameraPosition": {
      "type": "v3",
      "glslType": "vec3"
    },
    "time": {
      "type": "f",
      "glslType": "float"
    },
    "starRadius": {
      "value": "0.6",
      "type": "f",
      "glslType": "float"
    },
    "starDensity": {
      "value": "6",
      "type": "f",
      "glslType": "float"
    },
    "starColor": {
      "value": {
        "r": 0.796078431372549,
        "g": 0.9254901960784314,
        "b": 0.9411764705882353
      },
      "type": "c",
      "glslType": "vec3"
    },
    "Parallax_Starfield1589818251521_34_speed": {
      "value": "0.5",
      "type": "f",
      "glslType": "float"
    },
    "Parallax_Starfield1589818251521_34_resolution": {
      "value": {
        "x": "10",
        "y": "10"
      },
      "type": "v2",
      "glslType": "vec2"
    },
    "Caustic_Improved1589818274674_65_speed": {
      "value": "0.02",
      "type": "f",
      "glslType": "float"
    },
    "Caustic_Improved1589818274674_65_color": {
      "value": {
        "r": 0.6745098039215687,
        "g": 0.8392156862745098,
        "b": 1
      },
      "type": "c",
      "glslType": "vec3"
    },
    "Caustic_Improved1589818274674_65_brightness": {
      "value": "22",
      "type": "f",
      "glslType": "float"
    },
    "Caustic_Improved1589818274674_65_uvScale": {
      "value": {
        "x": "0.25",
        "y": "0.25",
        "z": 0
      },
      "type": "v2",
      "glslType": "vec2"
    },
    "noiseImage": {
      "value": noise,
      "type": "t",
      "glslType": "sampler2D"
    },
    "distortion": {
      "value": "10",
      "type": "f",
      "glslType": "float"
    },
    "contrast": {
      "value": "1.5",
      "type": "f",
      "glslType": "float"
    },
    "Noise_Ripples1589818316527_119_speed": {
      "value": "0.02",
      "type": "f",
      "glslType": "float"
    },
    "Noise_Ripples1589818316527_119_color": {
      "value": {
        "r": 0.6901960784313725,
        "g": 0.8470588235294118,
        "b": 1
      },
      "type": "c",
      "glslType": "vec3"
    },
    "Noise_Ripples1589818316527_119_brightness": {
      "value": "0.1",
      "type": "f",
      "glslType": "float"
    },
    "Noise_Ripples1589818316527_119_resolution": {
      "value": {
        "x": "10",
        "y": "10"
      },
      "type": "v2",
      "glslType": "vec2"
    },
    "Tiling_4D_Perlin_Noise1589818366493_165_uvScale": {
      "value": {
        "x": "1",
        "y": "1"
      },
      "type": "v2",
      "glslType": "vec2"
    },
    "Tiling_4D_Perlin_Noise1589818366493_165_color": {
      "value": {
        "r": "1",
        "g": "1",
        "b": "1"
      },
      "type": "c",
      "glslType": "vec3"
    },
    "Tiling_4D_Perlin_Noise1589818366493_165_speed": {
      "value": "0.01",
      "type": "f",
      "glslType": "float"
    },
    "image": {
      "value": null,
      "type": "t",
      "glslType": "sampler2D"
    },
    "Caustic_Image_Based1589818518398_257_speed": {
      "value": "0.2",
      "type": "f",
      "glslType": "float"
    },
    "Caustic_Image_Based1589818518398_257_resolution": {
      "value": "4",
      "type": "f",
      "glslType": "float"
    },
    "Caustic_Image_Based1589818518398_257_color": {
      "value": {
        "r": 0.7333333333333333,
        "g": 0.7333333333333333,
        "b": 1
      },
      "type": "c",
      "glslType": "vec3"
    },
    "Caustic_Image_Based1589818518398_257_brightness": {
      "value": "1.1",
      "type": "f",
      "glslType": "float"
    }
  },
  "url": "http://shaderfrog.com/app/view/4379",
  "user": {
    "username": "anagarza",
    "url": "http://shaderfrog.com/app/profile/andrewray"
  }
}

export { Neurons }